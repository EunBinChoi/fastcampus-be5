/** write the answer here. */

public int nextInt(int radix) {
    // Check cached result
    if ((typeCache != null) && (typeCache instanceof Integer)
        && this.radix == radix) {
        int val = ((Integer)typeCache).intValue();
        useTypeCache();
        return val;
    }
    setRadix(radix);
    clearCaches();
    // Search for next int
    try {
        String s = next(integerPattern());
        if (matcher.group(SIMPLE_GROUP_INDEX) == null)
            s = processIntegerToken(s);
        return Integer.parseInt(s, radix);
    } catch (NumberFormatException nfe) {
        position = matcher.start(); // don't skip bad token
        throw new InputMismatchException(nfe.getMessage());
    }
}

- `try~catch` 블록에서 다시 다른 예외를 던지는데 이를 예외전환이라고 한다.
- 위의 예시에서 예외전환을 하는 이유가 무엇인지에 대해 서술하시오.
    - nextInt() 함수는 next()를 통해 사용자에게 데이터를 입력받고 Integer.parseInt()를 호출하게 된다.
    - 여기서, 만약 Integer로 parse()가 불가능한 데이터인 경우에는 NumberFormatException을 발생하게 된다.
    - nextInt() 함수를 호출했을 때 만약 nextInt()가 받을 수 없는 데이터인 경우,
    nextInt()를 구현하기 위해 사용한 메소드에서 발생하는 예외인 NumberFormatException를 발생하는 것보다는
    InputMismatchException 예외를 발생하는 것이 좀 더 명확한 예외를 전달할 수 있기 때문에 예외를 전환하는 것이다.