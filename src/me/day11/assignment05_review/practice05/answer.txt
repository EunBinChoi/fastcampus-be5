/** write the answer here. */

- 예외가 발생하는 위치: objectCopyExample1.clone(); (line 12)
- CloneNotSupportedException 예외가 발생하는 이유:
    객체의 clone()를 호출하면 Object 클래스에서 상속한 clone() 메소드를 호출하게 되는데,
    모든 클래스에는 Object 클래스를 상속하고 있으므로 Clazz 클래스 객체에도 상속받은 clone() 메소드를 아래와 같이 재정의하고 있다.

    @Override
    public Clazz clone() throws CloneNotSupportedException {
        Clazz objectCopyExample = (Clazz) super.clone(); // shallow copy

        objectCopyExample.personArray = new Person[personArray.length]; // 배열 객체인 경우 deep copy
        for (int i = 0; i < objectCopyExample.personArray.length; i++) {
            objectCopyExample.personArray[i] = new Person();
            objectCopyExample.personArray[i].setName(personArray[i].getName());
            objectCopyExample.personArray[i].setGender(personArray[i].getGender());
            objectCopyExample.personArray[i].setBirthdate(personArray[i].getBirthdate());
            objectCopyExample.personArray[i].setRegistrationNumber(personArray[i].getRegistrationNumber());
        }
        return objectCopyExample;
    }

    재정의헀음에도 불구하고 CloneNotSupportedException 예외가 발생하는 이유는,
    clone() 메소드의 구현적인 이유 때문인데,
    clone() 메소드는 Object 클래스에 정의되어있기 때문에 자바에서 정의한 클래스는 모두 clone() 메소드를 정의할 수 있다.

    하지만, 모든 객체가 복사가 가능한 것은 아니므로 자바에서는 Cloneable 인터페이스 구현을 통해 복사 가능한 객체인지를 정의해주고 있다.
    현재 Clazz 클래스에서는 Cloneable 인터페이스가 구현되어있지 않음으로 예외가 발생하는 것이다.

    이렇게 구현해놓은 이유는, Object 클래스에 clone() 메소드를 native OS에 맞게 컴파일된 메소드를 사용하기 위함이다.
    만약 이를 JVM 위에서 컴파일해서 실행하게 되면 native OS에 맞게 최적화된 복사 함수를 사용할 수 없기 때문이다. (마치 System.arraycopy() 처럼)