/** write the answer here. */

- **아래 문제의 참 / 거짓을 판별하시오.**
- 일반 텍스트 파일에 정답을 작성하시면 됩니다. `**New > File > answer.txt**`
    1. 하나의 인터페이스 Interface가 있다고 가정하자.

        ```java
        Interface i = new Interface() (X)
        ```
        >> 인터페이스는 객체 생성 불가능
        >> 만약 인스턴스 메소드를 재정의하면 가능하긴 하지만 new Interface() { ... } 꼴이 됨

    2. 하나의 추상 클래스 AbstractClass가 있다고 가정하자.

        ```java
        AbstractClass a = new AbstractClass() (X)
        ```
        >> 추상 클래스는 객체 생성 불가능
        >> 만약 인스턴스 메소드를 재정의하면 가능하긴 하지만 new AbstractClass() { ... } 꼴이 됨

    3. 부모클래스 A를 상속하고 있는 자식 클래스 B가 있다고 가정하자. (B is A)

        ```java
        A a = new B() (O)
        B b = new A() (X)
        ```
        >> 부모 클래스 변수에 자식 객체가 사는 건 가능하지만 자식 클래스 변수에 부모 객체가 사는 건 불가능함
        >> 자식 객체가 생성될 때는 적어도 부모가 가지고 있는 필드나 메소드를 상속받아 메모리 공간을 할당하고 있기 때문에 자식 객체가 부모 클래스 변수에 사는 것은 가능함
        >> 부모 객체가 생성될 떄는 자식이 가지고 있는 필드나 메소드에 대한 메모리 공간이 없기 때문에 부모 객체가 자식 클래스 변수에 사는 것은 불가능함

    4. 인터페이스 Interface를 구현하고 있는 구현 클래스 ImplementClass가 있다고 가정하자.

        ```java
        Interface i = new ImplementClass() (O)
        ```
        >> 인터페이스를 구현하고 있는 구현 클래스 객체는 인터페이스 객체에 살 수 있음

    5. 클래스 B의 필드로 클래스 A를 포함하고 있다고 가정하자. (B has a A)

        ```java
        A a = new B() (X)
        ```
        >> has-a 객체 관계에서는 클래스 B의 필드로 클래스 A를 포함하고 있다고 해서 클래스 B로 생성된 객체가 클래스 A 객체 변수에 살 수 없음

    6. 인터페이스끼리 다중 상속이 가능하다. (O)
        >> 인터페이스끼리는 다중 상속이 가능함

    7. 클래스끼리 다중 상속이 가능하다. (X)
        >> 클래스끼리는 다중 상속이 불가능함

    8. 부모 클래스의 모든 필드와 메서드는 자식에게 상속된다. (X)
        >> private 접근제어자로 설정된 필드와 메서드는 자식에게 상속되지 않음

    9. 추상 클래스는 추상 메소드가 적어도 한 개 존재하는 클래스이다. (X)
        >> 추상 클래스는 추상 메소드가 없어도 정의할 수 있음

    10. 추상 클래스에 정의된 추상 메소드는 자식 클래스 (*인스턴스 생성 가능한 클래스라고 가정*)에서 모두 재정의 되어야 한다. (O)
        >> 모두 재정의 되어야한다
        >> 애초에 abstract private 정의 불가능하기 때문에 abstract (protected, public)으로 정의된 추상 메소드는 모두 재정의되어야 함