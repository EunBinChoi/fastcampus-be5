/** write the answer here. */


- 추상 클래스 (추상 + 클래스 => 객체지향 디자인 패턴에 충돌이 생김)
    - 클래스인데 정의가 되어있지 않은 메소드가 있음.
    - 클래스인데 객체는 생성이 불가능함. => 객체 생성이 가능한 것: 클래스
    - 자식들에게는 공통된 이름으로 메소드를 제공할 순 있음. => "인터페이스"

- 추상 클래스는 클래스 계층도에 정의가 되며 자식들에게 공통된 메소드를 제공함으로써 자식 객체들을 부모 객체 변수이름으로 관리할 수 있다는 장점을 가지고 있다.
- 하지만 클래스의 근원적인 목적은 객체를 생성하기 위함인데 추상 클래스로 정의된 클래스는 객체를 생성할 수 없다.
- 부모 클래스가 공통된 메소드를 제공하고 자식 객체들을 부모 객체 변수이름으로 관리할 수 있다는 장점을 위해 부모 클래스를 추상 클래스로 만든다는 것이 클래스 정의 목적이 불분명함.
- 따라서 추상 클래스 대신에 클래스 계층도에 정의되지 않으면서 자식 객체들을 관리할 수 있는 인터페이스라는 개념을 새롭게 정의하였고 인터페이스를 통해 이전 추상 클래스의 역할을 대신할 수 있기 때문에 인터페이스를 주로 사용한다.
- 인터페이스는 클래스와 달리 필드를 가지고 있지 않고 상수나 메소드만 가질 수 있는 공간을 의미하며 이는 근원적인 목적이 객체를 만들기 위한 목적이 아님으로 공통된 메소드를 제공하면서 객체 생성은 불가능한 추상 클래스보다 주로 사용한다.